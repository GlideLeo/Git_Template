# feat :新功能 
# fix/to ：修复bug,可以是QA发现的BUG,也可以是研发自己发现的BUG
# fix ：产生diff并自动修复此问题,适合于一次提交直接修复问题
# to ：只产生diff不自动修复此问题,适合于多次提交,最终修复问题提交时使用fix
# doc :文档改变
# style :代码格式改变
# refactor :某个已有功能重构
# perf :性能优化
# test :增加测试
# build :改变了build工具 如 grunt换成了 npm
# revert :撤销上一次的 commit 
# merge ：代码合并
# ...
# 
# scope(必选)用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。
# all :表示影响面大 ，如修改了网络框架  会对真个程序产生影响
# location :表示影响小，某个小小的功能
# module :表示会影响某个模块 如登录模块、首页模块 、用户管理模块等等
# ...
# 
# subject(必选)是commit目的的简短描述，不超过50个字符，建议使用中文，结尾不加句号或其他标点符号。
# 
# body(可选)具体的修改信息，应该尽量详细。
# 
# footer(可选)放置备注，比如是 bug，可以把bug id放入

<type>(<scope>): <subject>